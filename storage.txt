get_city_weather: {
        description: 'Get the current weather for a city',
        parameters: z.object({
          city: z.string().describe('the city')
        }).required(),
        generate: async function* ({ city }) {
          yield (<BotCard>
                  <SpinnerMessage/>
                  </BotCard>
                )
          
          await sleep(1000)

          const toolCallId = nanoid()

          aiState.done({
            ...aiState.get(),
            messages: [
              ...aiState.get().messages,
              {
                id: nanoid(),
                role: 'assistant',
                content: [
                  {
                    type: 'tool-call',
                    toolName: 'getCityWeather',
                    toolCallId,
                    args: { city }
                  }
                ]
              },
              {
                id: nanoid(),
                role: 'tool',
                content: [
                  {
                    type: 'tool-result',
                    toolName: 'getCityWeather',
                    toolCallId,
                    result: {Weather}
                  }
                ]
              }
            ]
          })

          return (<BotCard><Weather/></BotCard>)
        }
      },

// export const Weather = () => {
//   const [city, setCity] = useState<string>('');
//   const [weather, setWeather] = useState<any>(null);
//   const [loading, setLoading] = useState<boolean>(false);
//   const [error, setError] = useState<string | null>(null);

//   const fetchWeather = async () => {
//     setLoading(true);
//     setError(null);

//     try {
//         const response = await axios.get(
//             `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=5903236a4f6da416d119d851a5de7b02`
//           );
      
//       const data = await response.data;
//       console.log(response.data);
//       if (data.error) {
//         throw new Error(data.error);
//       }

//       setWeather(response.data);
//     } catch (err) {
//       setError((err as Error).message);
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <div>
//       <input
//         type="text"
//         value={city}
//         onChange={(e) => setCity(e.target.value)}
//         placeholder="Enter city name"
//       />
//       <button onClick={fetchWeather}>Get Weather</button>

//       {loading && <p>Loading...</p>}
//       {error && <p>Error: {error}</p>}
//       {weather && (
//         <Card className="w-[580px] justify-content">
//         <div>
//           <CardHeader>
//             <CardTitle>
//             <h2 className="text-lg font-bold" >Weather in {weather.name}</h2>
//             </CardTitle>
//           </CardHeader>
//            <CardContent>
//             <p className="text-gray-500">   
//                Date: {new Date().toLocaleString() + ''}
//             </p>
//            </CardContent> 
//           <CardContent className="grid gap-4">
//           <div className="flex items-center space-x-4 rounded-md border p-4">
//             <div className='flex-1 space-y-1 grid-cols-3'>
//                 <img src="/weather-icon.png" alt="Weather Icon" className="w-21 h-21" />
//                 <p className="mb-4 grid grid-cols-[25px_1fr] items-start pb-4 last:mb-0 last:pb-0 grid-cols-1 font-semibold" >Temperature: {weather.main.temp} °C</p>
//                 <p className="text-xl font-semibold">Condition: {weather.weather[0].description}</p>
//                 <p className="text-gray-500">Feels like : {weather.main.feels_like}°C</p>
//             </div>
//             <div>
//                 <p className="text-gray-500 font-medium">Humidity : {weather.main.humidity}%</p>
//                 <p className="text-gray-500 font-medium">Pressure : {weather.main.pressure}</p>
//                 <p className="text-gray-500 font-medium">Wind Speed : {weather.wind.speed}m/s</p>
//             </div>
//           </div>
//           </CardContent>
//         </div>
        
//         </Card>
//       )}
//     </div>
//   );
// };

// export default Weather;



get_city_weather: {
        description: 'Get the current weather for a city',
        parameters: z.object({
          city: z.string().describe('the city')
        }).required(),
        generate: async function* ({ city }) {
          yield (<BotCard>
                  <SpinnerMessage/>
                  </BotCard>
                )
          const weather:any = submitUserMessage(city)
          await sleep(1000)

          const toolCallId = nanoid()

          aiState.done({
            ...aiState.get(),
            messages: [
              ...aiState.get().messages,
              {
                id: nanoid(),
                role: 'assistant',
                content: [
                  {
                    type: 'tool-call',
                    toolName: 'get_city_weather',
                    toolCallId,
                    args: { city }
                  }
                ]
              },
              {
                id: nanoid(),
                role: 'tool',
                content: [
                  {
                    type: 'tool-result',
                    toolName: 'get_city_weather',
                    toolCallId,
                    result: city
                  }
                ]
              }
            ]
          })

          return (<BotCard><Weather props={weather}/></BotCard>)
        }
      },


'use client'
import axios, { AxiosResponse } from 'axios';
import { Button } from '@/components/ui/button';
import { useState } from 'react';

interface SearchResult { 
    title: string; 
    link: string; 
    snippet: string; 
}

export function SearchBrave(query: any){
     const url = 'https://search.brave.com/';
     const API_KEY='BSAXH1w-j_FK7P6zu8rJ9jFtfEUbZrG';
     const [query1, setQuery] = useState<string>('');
     const[int, setInt]= useState<any>('');
     
    const Search = async ()=>{
     try { 
        // Make the request to the Brave Search API 
        const response: AxiosResponse<any> = await axios.get(url, 
            { 
                params: { q: query1, count:5, offset:0 },// The search query count: 10, // Number of results to retrieve offset: 0, // Offset for pagination 
            
                headers: { Authorization: API_KEY}
            }
             // Add the API key for authorization 
            
            
        );
        // Extract and format the search results
             
            const results = response.data.webpages.value || [];
            const Internet= results.map((result: any) => ({
            title: result.name,
            link: result.url,
            snippet: result.snippet,
            }));

            setInt(Internet);
      }
        catch (error) 
        { console.error('Error fetching search results:', error); return []; } 

    // searchBrave('latest AI trends') .then((results) => { console.log('Search Results:', results); }) .catch((error) => { console.error('Search Error:', error); });
       };
 return(
    <div>
        <h1>Search Results</h1>
        
        <input 
          className='min-h-[60px] w-[430px] resize-none bg-transparent px-3 py-[1.3rem] sm:text-sm rounded-lg'
          type="text" id="search" 
          value={query1}
          onChange={(e) => setQuery(e.target.value)} 
          placeholder="Search..."/>
        
        <Button
        onClick={() => Search}
            //.then((results) => { console.log('Search Results:', results); }).catch((error) => { console.error('Search Error:', error); 

            // }) }
        >Search</Button>
        {/* <script async src="https://cse.google.com/cse.js?cx=809bf1261a7df4589">
            </script>
            <div class="gcse-search"></div> */}
       
        <div>
            <p>
               {int && (
                int.map((item: any) => (
                    <div key={item.title}>
                        <h2>{item.title}</h2>
                         <p>{item.link}</p>
                         <p>{item.snippet}</p>
                    </div>

               )))}
            </p>
            
        </div>
    
    </div>
 )
 }

 Defining the chatbot's AI state

The code defines the chatbot's AI state using the AIState type, which consists of a chatId and an array of Message objects. The Message type represents a single message in the chat conversation, with properties such as id, role (e.g., user, assistant, or system), and content.

Defining the chatbot's UI state

The code defines the chatbot's UI state using the UIState type, which is an array of objects with an id and a display property. The display property is a React node that represents the UI element to be rendered.

Defining the chatbot's actions

The code defines two actions:

submitUserMessage: handles user input and updates the chatbot's AI state accordingly
confirmPurchase: handles stock purchases and updates the chatbot's AI state accordingly
Defining the chatbot's tools

The code defines several tools that the chatbot can use to generate responses:

get_city_weather: retrieves the current weather for a given city
search_the_internet: searches the internet for a given query
listStocks: lists three imaginary trending stocks
showStockPrice: shows the current price of a given stock
showStockPurchase: shows the UI to purchase a given stock
getEvents: lists funny imaginary events related to stock activity
Each tool has a description, parameters, and a generate function that returns a React node representing the tool's output.

Defining the chatbot's logic

The code defines the chatbot's logic using the streamUI function, which takes a model (in this case, the OpenAI gpt-3.5-turbo model), an initial UI element, and a system message. The streamUI function generates a response based on the user's input and the chatbot's AI state.

Exporting the chatbot

The code exports the chatbot as an instance of the AI class, which is created using the createAI function from the BLACKBOX AI framework. The AI class takes the chatbot's AI state, UI state, and actions as arguments.

Weather Function

<html>
<head>
    <title>Kandy Weather Forecast</title>
    <script src="https://unpkg.com/react/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"></link>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center h-screen">
    <div id="root"></div>
    <script type="text/babel" data-type="module">
        // @ts-ignore
        const { useState } = React;

        const WeatherCard: React.FC = () => {
            const [location, setLocation] = useState<string>("kandy");

            return (
                <div className="bg-white rounded-lg shadow-lg p-6 w-96">
                    <div className="text-center text-xl font-bold text-gray-800 mb-4">Kandy Weather Forecast</div>
                    <div className="flex justify-between items-center mb-4">
                        <div className="text-lg font-bold text-gray-700">Thursday, 29 June</div>
                        <input 
                            type="text" 
                            value={location} 
                            onChange={(e) => setLocation(e.target.value)} 
                            className="border border-orange-400 rounded-full px-3 py-1 text-gray-700 focus:outline-none" 
                        />
                    </div>
                    <div className="flex">
                        <div className="flex-1 flex flex-col items-center justify-center border-r border-gray-200">
                            <img src="https://placehold.co/100x100?text=Weather+Icon" alt="Weather icon showing light rain" className="mb-2" />
                            <div className="text-4xl font-bold text-gray-800">25°C</div>
                            <div className="text-gray-600">light rain</div>
                        </div>
                        <div className="flex-1 grid grid-cols-2 gap-4 p-4">
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Feels Like</div>
                                <div className="text-xl font-bold text-gray-800">23°C</div>
                                <i className="fas fa-thermometer-half text-orange-500"></i>
                            </div>
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Wind</div>
                                <div className="text-xl font-bold text-gray-800">1.87 m/s</div>
                                <i className="fas fa-wind text-blue-500"></i>
                            </div>
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Humidity</div>
                                <div className="text-xl font-bold text-gray-800">89%</div>
                                <i className="fas fa-tint text-blue-500"></i>
                            </div>
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Rain</div>
                                <div className="text-xl font-bold text-gray-800">N/A mm</div>
                                <i className="fas fa-cloud-rain text-blue-500"></i>
                            </div>
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Sunrise</div>
                                <div className="text-xl font-bold text-gray-800">5:54 AM</div>
                                <i className="fas fa-sun text-orange-500"></i>
                            </div>
                            <div className="flex flex-col items-center">
                                <div className="text-gray-600">Sunset</div>
                                <div className="text-xl font-bold text-gray-800">6:26 PM</div>
                                <i className="fas fa-sun text-orange-500"></i>
                            </div>
                        </div>
                    </div>
                </div>
            );
        }

        ReactDOM.render(<WeatherCard />, document.getElementById('root'));
    </script>
</body>
</html>